generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alert {
  id            Int             @id @default(autoincrement())
  type          String
  time          DateTime        @db.Time(6)
  date          DateTime        @db.Date
  zone          String
  status        String
  level         level_new
  device_id     Int?
  device        device?         @relation(fields: [device_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_device")
  panne_history panne_history[]
}

model device {
  id               Int                @id @default(autoincrement())
  type_id          Int
  state_type_id    Int
  user_id          Int?
  mac_address      String             @db.VarChar
  software_version String             @db.VarChar
  date_of_service  DateTime           @db.Date
  comm_state       Boolean
  connection_state Boolean?           @default(true)
  battery_capacity Int                @default(0)
  price            Float?             @default(0) @db.Real
  alert            alert[]
  state_type       state_type         @relation(fields: [state_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  device_type      device_type        @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user?              @relation(fields: [user_id], references: [id], onUpdate: NoAction)
  purchase_history purchase_history[]
}

model device_type {
  id     Int      @id @default(autoincrement())
  type   String   @unique @db.VarChar(100)
  device device[]
}

model emergency_contact {
  id     BigInt  @id @default(autoincrement())
  label  String? @db.VarChar
  number String? @db.VarChar
}

model env_delimiter {
  id          Int          @id @default(autoincrement())
  created_at  DateTime     @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?    @db.Timestamp(6)
  env_id      Int?
  coordinates Json?        @db.Json
  type        String?
  environment environment? @relation(fields: [env_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model env_user {
  id          Int          @id @default(autoincrement())
  user_id     Int
  env_id      Int?
  environment environment? @relation(fields: [env_id], references: [id])
  user        user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model environment {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar
  description   String?         @db.VarChar
  address       String?         @db.VarChar
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @db.Timestamp(6)
  map_id        Int?
  is_public     Boolean?        @default(false)
  surface       Float?          @default(0) @db.Real
  env_delimiter env_delimiter[]
  env_user      env_user[]
  map           map?            @relation(fields: [map_id], references: [id], onDelete: Cascade)
  poi           poi[]
  zone          zone[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model expense {
  id          BigInt           @id @default(autoincrement())
  created_at  DateTime         @default(now()) @db.Timestamptz(6)
  label       String?          @db.VarChar
  amount      Float            @default(0) @db.Real
  category    ExpenseCategory?
  description String?
  date        DateTime?        @db.Date
}

model format {
  id     Int    @id @default(autoincrement())
  format String @db.VarChar
  map    map[]
}

model helper_user {
  id                               Int     @id @default(autoincrement())
  user_id                          Int?
  helper_id                        Int?
  state                            String? @default("Pending") @db.VarChar
  user_helper_user_helper_idTouser user?   @relation("helper_user_helper_idTouser", fields: [helper_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_helper_user_user_idTouser   user?   @relation("helper_user_user_idTouser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model intervention_history {
  id               Int                @id @default(autoincrement())
  device_id        Int?
  maintenancier_id Int?
  scheduled_date   DateTime           @db.Timestamp(6)
  completion_date  DateTime?          @db.Timestamp(6)
  description      String?
  status           String?
  type             intervention_type?
  title            String?
  location         String?
  user             user?              @relation(fields: [maintenancier_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model localisation {
  id         Int      @id @default(autoincrement())
  longitude  String
  latitude   String
  userId     Int      @unique
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  user       user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model map {
  id          Int           @id @default(autoincrement())
  created_at  DateTime      @default(now()) @db.Timestamptz(6)
  format_id   Int?
  environment environment[]
  format      format?       @relation(fields: [format_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  poi         poi[]
  zone        zone[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model market_potentiel {
  id              BigInt   @id @default(autoincrement())
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  city            String   @unique @db.VarChar
  potential_value Int?
}

model panne_history {
  id       Int    @id @default(autoincrement())
  alert_id Int?
  alert    alert? @relation(fields: [alert_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model poi {
  id           Int           @id @default(autoincrement())
  created_at   DateTime      @default(now()) @db.Timestamptz(6)
  env_id       Int?
  category_id  Int?
  name         String?       @db.VarChar
  description  String?       @db.VarChar
  coordinates  Json?         @db.Json
  image_url    String?       @db.VarChar
  map_id       Int?
  poi_category poi_category? @relation(fields: [category_id], references: [id])
  environment  environment?  @relation(fields: [env_id], references: [id], onDelete: Cascade)
  map          map?          @relation(fields: [map_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  poi_zone     poi_zone[]
}

model poi_category {
  id       Int    @id @default(autoincrement())
  category String @db.VarChar
  poi      poi[]
}

model poi_zone {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  poi_id     Int?
  zone_id    Int?
  poi        poi?     @relation(fields: [poi_id], references: [id], onDelete: Cascade)
  zone       zone?    @relation(fields: [zone_id], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model pricing {
  id        Int     @id @default(autoincrement())
  attribute String? @unique
  price     Float?
}

model purchase_history {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now()) @db.Timestamptz(6)
  user_id   Int?
  device_id Int?
  public    Boolean? @default(false)
  device    device?  @relation(fields: [device_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model state_type {
  id     Int      @id @default(autoincrement())
  state  String   @unique
  device device[]
}

model user {
  id                                      Int                    @id @default(autoincrement())
  created_at                              DateTime               @default(now()) @db.Timestamptz(6)
  family_name                             String?                @db.VarChar
  first_name                              String?                @db.VarChar
  phone_number                            String?                @db.VarChar
  password                                String?                @db.VarChar
  userTypeId                              Int?
  email                                   String?                @unique @db.VarChar
  sex                                     String?                @db.VarChar
  street                                  String?                @db.VarChar
  city                                    String?                @db.VarChar
  birth_date                              DateTime?
  Identifier                              String?                @db.VarChar
  device                                  device[]
  env_user                                env_user[]
  helper_user_helper_user_helper_idTouser helper_user[]          @relation("helper_user_helper_idTouser")
  helper_user_helper_user_user_idTouser   helper_user[]          @relation("helper_user_user_idTouser")
  intervention_history                    intervention_history[]
  localisation                            localisation?
  purchase_history                        purchase_history[]
  user_type                               user_type?             @relation(fields: [userTypeId], references: [id], onDelete: Cascade)
}

model user_type {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  type       String?  @db.VarChar
  user       user[]
}

model zone {
  id                                  Int          @id @default(autoincrement())
  created_at                          DateTime     @default(now()) @db.Timestamptz(6)
  env_id                              Int?
  name                                String?      @db.VarChar
  description                         String?      @db.VarChar
  type_id                             Int?
  coordinates                         Json?        @db.Json
  updated_at                          DateTime?    @db.Timestamp(6)
  map_id                              Int?
  zone_type                           Int?
  poi_zone                            poi_zone[]
  environment                         environment? @relation(fields: [env_id], references: [id], onDelete: Cascade)
  map                                 map?         @relation(fields: [map_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  zone_type_zone_type_idTozone_type   zone_type?   @relation("zone_type_idTozone_type", fields: [type_id], references: [id])
  zone_type_zone_zone_typeTozone_type zone_type?   @relation("zone_zone_typeTozone_type", fields: [zone_type], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model zone_type {
  id                             Int      @id @default(autoincrement())
  created_at                     DateTime @default(now()) @db.Timestamptz(6)
  type                           String?  @db.VarChar
  color                          String?  @db.VarChar
  icon                           String?  @db.VarChar
  name                           String?
  description                    String?
  priority                       String?  @db.VarChar
  accessible                     Boolean?
  zone_zone_type_idTozone_type   zone[]   @relation("zone_type_idTozone_type")
  zone_zone_zone_typeTozone_type zone[]   @relation("zone_zone_typeTozone_type")
}

enum ExpenseCategory {
  COGS
  SALARY
  MAINTENANCE
  UTILITIES
  MARKETING
  OTHER
}

enum intervention_type {
  technique
  Non_technique @map("Non technique")
}

enum level_new {
  critique
  modere
  mineur
}

enum type {
  technique
  Non_technique @map("Non technique")
}
